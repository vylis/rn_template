86f488f2b30c00bec4633aa242c0f9da
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var AnimatedNode = require('./AnimatedNode');

var NativeAnimatedHelper = require('../NativeAnimatedHelper');

var AnimatedWithChildren = function (_AnimatedNode) {
  (0, _inherits2.default)(AnimatedWithChildren, _AnimatedNode);

  var _super = _createSuper(AnimatedWithChildren);

  function AnimatedWithChildren() {
    var _this;

    (0, _classCallCheck2.default)(this, AnimatedWithChildren);
    _this = _super.call(this);
    _this._children = [];
    return _this;
  }

  (0, _createClass2.default)(AnimatedWithChildren, [{
    key: "__makeNative",
    value: function __makeNative(platformConfig) {
      if (!this.__isNative) {
        this.__isNative = true;

        for (var child of this._children) {
          child.__makeNative(platformConfig);

          NativeAnimatedHelper.API.connectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
        }
      }

      (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedWithChildren.prototype), "__makeNative", this).call(this, platformConfig);
    }
  }, {
    key: "__addChild",
    value: function __addChild(child) {
      if (this._children.length === 0) {
        this.__attach();
      }

      this._children.push(child);

      if (this.__isNative) {
        child.__makeNative(this.__getPlatformConfig());

        NativeAnimatedHelper.API.connectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
      }
    }
  }, {
    key: "__removeChild",
    value: function __removeChild(child) {
      var index = this._children.indexOf(child);

      if (index === -1) {
        console.warn("Trying to remove a child that doesn't exist");
        return;
      }

      if (this.__isNative && child.__isNative) {
        NativeAnimatedHelper.API.disconnectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
      }

      this._children.splice(index, 1);

      if (this._children.length === 0) {
        this.__detach();
      }
    }
  }, {
    key: "__getChildren",
    value: function __getChildren() {
      return this._children;
    }
  }, {
    key: "__callListeners",
    value: function __callListeners(value) {
      (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedWithChildren.prototype), "__callListeners", this).call(this, value);

      if (!this.__isNative) {
        for (var child of this._children) {
          if (child.__getValue) {
            child.__callListeners(child.__getValue());
          }
        }
      }
    }
  }]);
  return AnimatedWithChildren;
}(AnimatedNode);

module.exports = AnimatedWithChildren;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBbmltYXRlZE5vZGUiLCJyZXF1aXJlIiwiTmF0aXZlQW5pbWF0ZWRIZWxwZXIiLCJBbmltYXRlZFdpdGhDaGlsZHJlbiIsIl9jaGlsZHJlbiIsInBsYXRmb3JtQ29uZmlnIiwiX19pc05hdGl2ZSIsImNoaWxkIiwiX19tYWtlTmF0aXZlIiwiQVBJIiwiY29ubmVjdEFuaW1hdGVkTm9kZXMiLCJfX2dldE5hdGl2ZVRhZyIsImxlbmd0aCIsIl9fYXR0YWNoIiwicHVzaCIsIl9fZ2V0UGxhdGZvcm1Db25maWciLCJpbmRleCIsImluZGV4T2YiLCJjb25zb2xlIiwid2FybiIsImRpc2Nvbm5lY3RBbmltYXRlZE5vZGVzIiwic3BsaWNlIiwiX19kZXRhY2giLCJ2YWx1ZSIsIl9fZ2V0VmFsdWUiLCJfX2NhbGxMaXN0ZW5lcnMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiQW5pbWF0ZWRXaXRoQ2hpbGRyZW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHR5cGUge1BsYXRmb3JtQ29uZmlnfSBmcm9tICcuLi9BbmltYXRlZFBsYXRmb3JtQ29uZmlnJztcbmNvbnN0IEFuaW1hdGVkTm9kZSA9IHJlcXVpcmUoJy4vQW5pbWF0ZWROb2RlJyk7XG5jb25zdCBOYXRpdmVBbmltYXRlZEhlbHBlciA9IHJlcXVpcmUoJy4uL05hdGl2ZUFuaW1hdGVkSGVscGVyJyk7XG5cbmNsYXNzIEFuaW1hdGVkV2l0aENoaWxkcmVuIGV4dGVuZHMgQW5pbWF0ZWROb2RlIHtcbiAgX2NoaWxkcmVuOiBBcnJheTxBbmltYXRlZE5vZGU+O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fY2hpbGRyZW4gPSBbXTtcbiAgfVxuXG4gIF9fbWFrZU5hdGl2ZShwbGF0Zm9ybUNvbmZpZzogP1BsYXRmb3JtQ29uZmlnKSB7XG4gICAgaWYgKCF0aGlzLl9faXNOYXRpdmUpIHtcbiAgICAgIHRoaXMuX19pc05hdGl2ZSA9IHRydWU7XG4gICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHRoaXMuX2NoaWxkcmVuKSB7XG4gICAgICAgIGNoaWxkLl9fbWFrZU5hdGl2ZShwbGF0Zm9ybUNvbmZpZyk7XG4gICAgICAgIE5hdGl2ZUFuaW1hdGVkSGVscGVyLkFQSS5jb25uZWN0QW5pbWF0ZWROb2RlcyhcbiAgICAgICAgICB0aGlzLl9fZ2V0TmF0aXZlVGFnKCksXG4gICAgICAgICAgY2hpbGQuX19nZXROYXRpdmVUYWcoKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc3VwZXIuX19tYWtlTmF0aXZlKHBsYXRmb3JtQ29uZmlnKTtcbiAgfVxuXG4gIF9fYWRkQ2hpbGQoY2hpbGQ6IEFuaW1hdGVkTm9kZSk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9jaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMuX19hdHRhY2goKTtcbiAgICB9XG4gICAgdGhpcy5fY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgaWYgKHRoaXMuX19pc05hdGl2ZSkge1xuICAgICAgLy8gT25seSBhY2NlcHQgXCJuYXRpdmVcIiBhbmltYXRlZCBub2RlcyBhcyBjaGlsZHJlblxuICAgICAgY2hpbGQuX19tYWtlTmF0aXZlKHRoaXMuX19nZXRQbGF0Zm9ybUNvbmZpZygpKTtcbiAgICAgIE5hdGl2ZUFuaW1hdGVkSGVscGVyLkFQSS5jb25uZWN0QW5pbWF0ZWROb2RlcyhcbiAgICAgICAgdGhpcy5fX2dldE5hdGl2ZVRhZygpLFxuICAgICAgICBjaGlsZC5fX2dldE5hdGl2ZVRhZygpLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBfX3JlbW92ZUNoaWxkKGNoaWxkOiBBbmltYXRlZE5vZGUpOiB2b2lkIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuX2NoaWxkcmVuLmluZGV4T2YoY2hpbGQpO1xuICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIlRyeWluZyB0byByZW1vdmUgYSBjaGlsZCB0aGF0IGRvZXNuJ3QgZXhpc3RcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLl9faXNOYXRpdmUgJiYgY2hpbGQuX19pc05hdGl2ZSkge1xuICAgICAgTmF0aXZlQW5pbWF0ZWRIZWxwZXIuQVBJLmRpc2Nvbm5lY3RBbmltYXRlZE5vZGVzKFxuICAgICAgICB0aGlzLl9fZ2V0TmF0aXZlVGFnKCksXG4gICAgICAgIGNoaWxkLl9fZ2V0TmF0aXZlVGFnKCksXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLl9jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIGlmICh0aGlzLl9jaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMuX19kZXRhY2goKTtcbiAgICB9XG4gIH1cblxuICBfX2dldENoaWxkcmVuKCk6IEFycmF5PEFuaW1hdGVkTm9kZT4ge1xuICAgIHJldHVybiB0aGlzLl9jaGlsZHJlbjtcbiAgfVxuXG4gIF9fY2FsbExpc3RlbmVycyh2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgc3VwZXIuX19jYWxsTGlzdGVuZXJzKHZhbHVlKTtcbiAgICBpZiAoIXRoaXMuX19pc05hdGl2ZSkge1xuICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiB0aGlzLl9jaGlsZHJlbikge1xuICAgICAgICAvLyAkRmxvd0ZpeE1lW21ldGhvZC11bmJpbmRpbmddIGFkZGVkIHdoZW4gaW1wcm92aW5nIHR5cGluZyBmb3IgdGhpcyBwYXJhbWV0ZXJzXG4gICAgICAgIGlmIChjaGlsZC5fX2dldFZhbHVlKSB7XG4gICAgICAgICAgY2hpbGQuX19jYWxsTGlzdGVuZXJzKGNoaWxkLl9fZ2V0VmFsdWUoKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBbmltYXRlZFdpdGhDaGlsZHJlbjtcbiJdLCJtYXBwaW5ncyI6IkFBVUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBR0EsSUFBTUEsWUFBWSxHQUFHQyxPQUFPLENBQUMsZ0JBQUQsQ0FBNUI7O0FBQ0EsSUFBTUMsb0JBQW9CLEdBQUdELE9BQU8sQ0FBQyx5QkFBRCxDQUFwQzs7SUFFTUUsb0I7Ozs7O0VBR0osZ0NBQWM7SUFBQTs7SUFBQTtJQUNaO0lBQ0EsTUFBS0MsU0FBTCxHQUFpQixFQUFqQjtJQUZZO0VBR2I7Ozs7V0FFRCxzQkFBYUMsY0FBYixFQUE4QztNQUM1QyxJQUFJLENBQUMsS0FBS0MsVUFBVixFQUFzQjtRQUNwQixLQUFLQSxVQUFMLEdBQWtCLElBQWxCOztRQUNBLEtBQUssSUFBTUMsS0FBWCxJQUFvQixLQUFLSCxTQUF6QixFQUFvQztVQUNsQ0csS0FBSyxDQUFDQyxZQUFOLENBQW1CSCxjQUFuQjs7VUFDQUgsb0JBQW9CLENBQUNPLEdBQXJCLENBQXlCQyxvQkFBekIsQ0FDRSxLQUFLQyxjQUFMLEVBREYsRUFFRUosS0FBSyxDQUFDSSxjQUFOLEVBRkY7UUFJRDtNQUNGOztNQUNELG1IQUFtQk4sY0FBbkI7SUFDRDs7O1dBRUQsb0JBQVdFLEtBQVgsRUFBc0M7TUFDcEMsSUFBSSxLQUFLSCxTQUFMLENBQWVRLE1BQWYsS0FBMEIsQ0FBOUIsRUFBaUM7UUFDL0IsS0FBS0MsUUFBTDtNQUNEOztNQUNELEtBQUtULFNBQUwsQ0FBZVUsSUFBZixDQUFvQlAsS0FBcEI7O01BQ0EsSUFBSSxLQUFLRCxVQUFULEVBQXFCO1FBRW5CQyxLQUFLLENBQUNDLFlBQU4sQ0FBbUIsS0FBS08sbUJBQUwsRUFBbkI7O1FBQ0FiLG9CQUFvQixDQUFDTyxHQUFyQixDQUF5QkMsb0JBQXpCLENBQ0UsS0FBS0MsY0FBTCxFQURGLEVBRUVKLEtBQUssQ0FBQ0ksY0FBTixFQUZGO01BSUQ7SUFDRjs7O1dBRUQsdUJBQWNKLEtBQWQsRUFBeUM7TUFDdkMsSUFBTVMsS0FBSyxHQUFHLEtBQUtaLFNBQUwsQ0FBZWEsT0FBZixDQUF1QlYsS0FBdkIsQ0FBZDs7TUFDQSxJQUFJUyxLQUFLLEtBQUssQ0FBQyxDQUFmLEVBQWtCO1FBQ2hCRSxPQUFPLENBQUNDLElBQVIsQ0FBYSw2Q0FBYjtRQUNBO01BQ0Q7O01BQ0QsSUFBSSxLQUFLYixVQUFMLElBQW1CQyxLQUFLLENBQUNELFVBQTdCLEVBQXlDO1FBQ3ZDSixvQkFBb0IsQ0FBQ08sR0FBckIsQ0FBeUJXLHVCQUF6QixDQUNFLEtBQUtULGNBQUwsRUFERixFQUVFSixLQUFLLENBQUNJLGNBQU4sRUFGRjtNQUlEOztNQUNELEtBQUtQLFNBQUwsQ0FBZWlCLE1BQWYsQ0FBc0JMLEtBQXRCLEVBQTZCLENBQTdCOztNQUNBLElBQUksS0FBS1osU0FBTCxDQUFlUSxNQUFmLEtBQTBCLENBQTlCLEVBQWlDO1FBQy9CLEtBQUtVLFFBQUw7TUFDRDtJQUNGOzs7V0FFRCx5QkFBcUM7TUFDbkMsT0FBTyxLQUFLbEIsU0FBWjtJQUNEOzs7V0FFRCx5QkFBZ0JtQixLQUFoQixFQUFxQztNQUNuQyxzSEFBc0JBLEtBQXRCOztNQUNBLElBQUksQ0FBQyxLQUFLakIsVUFBVixFQUFzQjtRQUNwQixLQUFLLElBQU1DLEtBQVgsSUFBb0IsS0FBS0gsU0FBekIsRUFBb0M7VUFFbEMsSUFBSUcsS0FBSyxDQUFDaUIsVUFBVixFQUFzQjtZQUNwQmpCLEtBQUssQ0FBQ2tCLGVBQU4sQ0FBc0JsQixLQUFLLENBQUNpQixVQUFOLEVBQXRCO1VBQ0Q7UUFDRjtNQUNGO0lBQ0Y7OztFQXJFZ0N4QixZOztBQXdFbkMwQixNQUFNLENBQUNDLE9BQVAsR0FBaUJ4QixvQkFBakIifQ==