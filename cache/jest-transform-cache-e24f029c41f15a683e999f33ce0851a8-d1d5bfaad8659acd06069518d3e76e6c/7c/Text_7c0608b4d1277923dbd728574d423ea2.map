{"version":3,"names":["Text","React","forwardRef","props","forwardedRef","accessible","allowFontScaling","ellipsizeMode","onLongPress","onPress","onPressIn","onPressOut","onResponderGrant","onResponderMove","onResponderRelease","onResponderTerminate","onResponderTerminationRequest","onStartShouldSetResponder","pressRetentionOffset","suppressHighlighting","restProps","useState","isHighlighted","setHighlighted","_disabled","disabled","accessibilityState","_accessibilityState","isPressable","initialized","useLazyInitialization","config","useMemo","pressRectOffset","event","onResponderTerminationRequest_DEPRECATED","onStartShouldSetResponder_DEPRECATED","eventHandlers","usePressability","eventHandlersForText","onClick","selectionColor","processColor","style","__DEV__","PressabilityDebug","isEnabled","StyleSheet","compose","color","numberOfLines","console","error","hasTextAncestor","useContext","TextAncestor","displayName","newValue","oldValue","setValue","module","exports"],"sources":["Text.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport * as PressabilityDebug from '../Pressability/PressabilityDebug';\nimport usePressability from '../Pressability/usePressability';\nimport StyleSheet from '../StyleSheet/StyleSheet';\nimport processColor from '../StyleSheet/processColor';\nimport TextAncestor from './TextAncestor';\nimport {NativeText, NativeVirtualText} from './TextNativeComponent';\nimport {type TextProps} from './TextProps';\nimport * as React from 'react';\nimport {useContext, useMemo, useState} from 'react';\n\n/**\n * Text is the fundamental component for displaying text.\n *\n * @see https://reactnative.dev/docs/text\n */\nconst Text: React.AbstractComponent<\n  TextProps,\n  React.ElementRef<typeof NativeText | typeof NativeVirtualText>,\n> = React.forwardRef((props: TextProps, forwardedRef) => {\n  const {\n    accessible,\n    allowFontScaling,\n    ellipsizeMode,\n    onLongPress,\n    onPress,\n    onPressIn,\n    onPressOut,\n    onResponderGrant,\n    onResponderMove,\n    onResponderRelease,\n    onResponderTerminate,\n    onResponderTerminationRequest,\n    onStartShouldSetResponder,\n    pressRetentionOffset,\n    suppressHighlighting,\n    ...restProps\n  } = props;\n\n  const [isHighlighted, setHighlighted] = useState(false);\n\n  const _disabled =\n    restProps.disabled != null\n      ? restProps.disabled\n      : props.accessibilityState?.disabled;\n  const _accessibilityState =\n    _disabled !== props.accessibilityState?.disabled\n      ? {...props.accessibilityState, disabled: _disabled}\n      : props.accessibilityState;\n\n  const isPressable =\n    (onPress != null ||\n      onLongPress != null ||\n      onStartShouldSetResponder != null) &&\n    _disabled !== true;\n\n  const initialized = useLazyInitialization(isPressable);\n  const config = useMemo(\n    () =>\n      initialized\n        ? {\n            disabled: !isPressable,\n            pressRectOffset: pressRetentionOffset,\n            onLongPress,\n            onPress,\n            onPressIn(event) {\n              setHighlighted(!suppressHighlighting);\n              onPressIn?.(event);\n            },\n            onPressOut(event) {\n              setHighlighted(false);\n              onPressOut?.(event);\n            },\n            onResponderTerminationRequest_DEPRECATED:\n              onResponderTerminationRequest,\n            onStartShouldSetResponder_DEPRECATED: onStartShouldSetResponder,\n          }\n        : null,\n    [\n      initialized,\n      isPressable,\n      pressRetentionOffset,\n      onLongPress,\n      onPress,\n      onPressIn,\n      onPressOut,\n      onResponderTerminationRequest,\n      onStartShouldSetResponder,\n      suppressHighlighting,\n    ],\n  );\n\n  const eventHandlers = usePressability(config);\n  const eventHandlersForText = useMemo(\n    () =>\n      eventHandlers == null\n        ? null\n        : {\n            onResponderGrant(event) {\n              eventHandlers.onResponderGrant(event);\n              if (onResponderGrant != null) {\n                onResponderGrant(event);\n              }\n            },\n            onResponderMove(event) {\n              eventHandlers.onResponderMove(event);\n              if (onResponderMove != null) {\n                onResponderMove(event);\n              }\n            },\n            onResponderRelease(event) {\n              eventHandlers.onResponderRelease(event);\n              if (onResponderRelease != null) {\n                onResponderRelease(event);\n              }\n            },\n            onResponderTerminate(event) {\n              eventHandlers.onResponderTerminate(event);\n              if (onResponderTerminate != null) {\n                onResponderTerminate(event);\n              }\n            },\n            onClick: eventHandlers.onClick,\n            onResponderTerminationRequest:\n              eventHandlers.onResponderTerminationRequest,\n            onStartShouldSetResponder: eventHandlers.onStartShouldSetResponder,\n          },\n    [\n      eventHandlers,\n      onResponderGrant,\n      onResponderMove,\n      onResponderRelease,\n      onResponderTerminate,\n    ],\n  );\n\n  // TODO: Move this processing to the view configuration.\n  const selectionColor =\n    restProps.selectionColor == null\n      ? null\n      : processColor(restProps.selectionColor);\n\n  let style = restProps.style;\n  if (__DEV__) {\n    if (PressabilityDebug.isEnabled() && onPress != null) {\n      style = StyleSheet.compose(restProps.style, {\n        color: 'magenta',\n      });\n    }\n  }\n\n  let numberOfLines = restProps.numberOfLines;\n  if (numberOfLines != null && !(numberOfLines >= 0)) {\n    console.error(\n      `'numberOfLines' in <Text> must be a non-negative number, received: ${numberOfLines}. The value will be set to 0.`,\n    );\n    numberOfLines = 0;\n  }\n\n  const hasTextAncestor = useContext(TextAncestor);\n\n  return hasTextAncestor ? (\n    <NativeVirtualText\n      {...restProps}\n      {...eventHandlersForText}\n      isHighlighted={isHighlighted}\n      isPressable={isPressable}\n      numberOfLines={numberOfLines}\n      selectionColor={selectionColor}\n      style={style}\n      ref={forwardedRef}\n    />\n  ) : (\n    <TextAncestor.Provider value={true}>\n      <NativeText\n        {...restProps}\n        {...eventHandlersForText}\n        disabled={_disabled}\n        accessible={accessible !== false}\n        accessibilityState={_accessibilityState}\n        allowFontScaling={allowFontScaling !== false}\n        ellipsizeMode={ellipsizeMode ?? 'tail'}\n        isHighlighted={isHighlighted}\n        numberOfLines={numberOfLines}\n        selectionColor={selectionColor}\n        style={style}\n        ref={forwardedRef}\n      />\n    </TextAncestor.Provider>\n  );\n});\n\nText.displayName = 'Text';\n\n/**\n * Returns false until the first time `newValue` is true, after which this will\n * always return true. This is necessary to lazily initialize `Pressability` so\n * we do not eagerly create one for every pressable `Text` component.\n */\nfunction useLazyInitialization(newValue: boolean): boolean {\n  const [oldValue, setValue] = useState(newValue);\n  if (!oldValue && newValue) {\n    setValue(newValue);\n  }\n  return oldValue;\n}\n\nmodule.exports = Text;\n"],"mappings":";;;;;;;;AAUA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;AAQA,IAAMA,IAGL,GAAGC,KAAK,CAACC,UAAN,CAAiB,UAACC,KAAD,EAAmBC,YAAnB,EAAoC;EAAA;;EACvD,IACEC,UADF,GAiBIF,KAjBJ,CACEE,UADF;EAAA,IAEEC,gBAFF,GAiBIH,KAjBJ,CAEEG,gBAFF;EAAA,IAGEC,aAHF,GAiBIJ,KAjBJ,CAGEI,aAHF;EAAA,IAIEC,WAJF,GAiBIL,KAjBJ,CAIEK,WAJF;EAAA,IAKEC,OALF,GAiBIN,KAjBJ,CAKEM,OALF;EAAA,IAMEC,UANF,GAiBIP,KAjBJ,CAMEO,SANF;EAAA,IAOEC,WAPF,GAiBIR,KAjBJ,CAOEQ,UAPF;EAAA,IAQEC,iBARF,GAiBIT,KAjBJ,CAQES,gBARF;EAAA,IASEC,gBATF,GAiBIV,KAjBJ,CASEU,eATF;EAAA,IAUEC,mBAVF,GAiBIX,KAjBJ,CAUEW,kBAVF;EAAA,IAWEC,qBAXF,GAiBIZ,KAjBJ,CAWEY,oBAXF;EAAA,IAYEC,6BAZF,GAiBIb,KAjBJ,CAYEa,6BAZF;EAAA,IAaEC,yBAbF,GAiBId,KAjBJ,CAaEc,yBAbF;EAAA,IAcEC,oBAdF,GAiBIf,KAjBJ,CAcEe,oBAdF;EAAA,IAeEC,oBAfF,GAiBIhB,KAjBJ,CAeEgB,oBAfF;EAAA,IAgBKC,SAhBL,0CAiBIjB,KAjBJ;;EAmBA,gBAAwC,IAAAkB,cAAA,EAAS,KAAT,CAAxC;EAAA;EAAA,IAAOC,aAAP;EAAA,IAAsBC,cAAtB;;EAEA,IAAMC,SAAS,GACbJ,SAAS,CAACK,QAAV,IAAsB,IAAtB,GACIL,SAAS,CAACK,QADd,4BAEItB,KAAK,CAACuB,kBAFV,qBAEI,sBAA0BD,QAHhC;;EAIA,IAAME,mBAAmB,GACvBH,SAAS,gCAAKrB,KAAK,CAACuB,kBAAX,qBAAK,uBAA0BD,QAA/B,CAAT,qBACQtB,KAAK,CAACuB,kBADd;IACkCD,QAAQ,EAAED;EAD5C,KAEIrB,KAAK,CAACuB,kBAHZ;;EAKA,IAAME,WAAW,GACf,CAACnB,OAAO,IAAI,IAAX,IACCD,WAAW,IAAI,IADhB,IAECS,yBAAyB,IAAI,IAF/B,KAGAO,SAAS,KAAK,IAJhB;EAMA,IAAMK,WAAW,GAAGC,qBAAqB,CAACF,WAAD,CAAzC;EACA,IAAMG,MAAM,GAAG,IAAAC,aAAA,EACb;IAAA,OACEH,WAAW,GACP;MACEJ,QAAQ,EAAE,CAACG,WADb;MAEEK,eAAe,EAAEf,oBAFnB;MAGEV,WAAW,EAAXA,WAHF;MAIEC,OAAO,EAAPA,OAJF;MAKEC,SALF,qBAKYwB,KALZ,EAKmB;QACfX,cAAc,CAAC,CAACJ,oBAAF,CAAd;QACAT,UAAS,QAAT,YAAAA,UAAS,CAAGwB,KAAH,CAAT;MACD,CARH;MASEvB,UATF,sBASauB,KATb,EASoB;QAChBX,cAAc,CAAC,KAAD,CAAd;QACAZ,WAAU,QAAV,YAAAA,WAAU,CAAGuB,KAAH,CAAV;MACD,CAZH;MAaEC,wCAAwC,EACtCnB,6BAdJ;MAeEoB,oCAAoC,EAAEnB;IAfxC,CADO,GAkBP,IAnBN;EAAA,CADa,EAqBb,CACEY,WADF,EAEED,WAFF,EAGEV,oBAHF,EAIEV,WAJF,EAKEC,OALF,EAMEC,UANF,EAOEC,WAPF,EAQEK,6BARF,EASEC,yBATF,EAUEE,oBAVF,CArBa,CAAf;EAmCA,IAAMkB,aAAa,GAAG,IAAAC,wBAAA,EAAgBP,MAAhB,CAAtB;EACA,IAAMQ,oBAAoB,GAAG,IAAAP,aAAA,EAC3B;IAAA,OACEK,aAAa,IAAI,IAAjB,GACI,IADJ,GAEI;MACEzB,gBADF,4BACmBsB,KADnB,EAC0B;QACtBG,aAAa,CAACzB,gBAAd,CAA+BsB,KAA/B;;QACA,IAAItB,iBAAgB,IAAI,IAAxB,EAA8B;UAC5BA,iBAAgB,CAACsB,KAAD,CAAhB;QACD;MACF,CANH;MAOErB,eAPF,2BAOkBqB,KAPlB,EAOyB;QACrBG,aAAa,CAACxB,eAAd,CAA8BqB,KAA9B;;QACA,IAAIrB,gBAAe,IAAI,IAAvB,EAA6B;UAC3BA,gBAAe,CAACqB,KAAD,CAAf;QACD;MACF,CAZH;MAaEpB,kBAbF,8BAaqBoB,KAbrB,EAa4B;QACxBG,aAAa,CAACvB,kBAAd,CAAiCoB,KAAjC;;QACA,IAAIpB,mBAAkB,IAAI,IAA1B,EAAgC;UAC9BA,mBAAkB,CAACoB,KAAD,CAAlB;QACD;MACF,CAlBH;MAmBEnB,oBAnBF,gCAmBuBmB,KAnBvB,EAmB8B;QAC1BG,aAAa,CAACtB,oBAAd,CAAmCmB,KAAnC;;QACA,IAAInB,qBAAoB,IAAI,IAA5B,EAAkC;UAChCA,qBAAoB,CAACmB,KAAD,CAApB;QACD;MACF,CAxBH;MAyBEM,OAAO,EAAEH,aAAa,CAACG,OAzBzB;MA0BExB,6BAA6B,EAC3BqB,aAAa,CAACrB,6BA3BlB;MA4BEC,yBAAyB,EAAEoB,aAAa,CAACpB;IA5B3C,CAHN;EAAA,CAD2B,EAkC3B,CACEoB,aADF,EAEEzB,iBAFF,EAGEC,gBAHF,EAIEC,mBAJF,EAKEC,qBALF,CAlC2B,CAA7B;EA4CA,IAAM0B,cAAc,GAClBrB,SAAS,CAACqB,cAAV,IAA4B,IAA5B,GACI,IADJ,GAEI,IAAAC,qBAAA,EAAatB,SAAS,CAACqB,cAAvB,CAHN;EAKA,IAAIE,KAAK,GAAGvB,SAAS,CAACuB,KAAtB;;EACA,IAAIC,OAAJ,EAAa;IACX,IAAIC,iBAAiB,CAACC,SAAlB,MAAiCrC,OAAO,IAAI,IAAhD,EAAsD;MACpDkC,KAAK,GAAGI,mBAAA,CAAWC,OAAX,CAAmB5B,SAAS,CAACuB,KAA7B,EAAoC;QAC1CM,KAAK,EAAE;MADmC,CAApC,CAAR;IAGD;EACF;;EAED,IAAIC,aAAa,GAAG9B,SAAS,CAAC8B,aAA9B;;EACA,IAAIA,aAAa,IAAI,IAAjB,IAAyB,EAAEA,aAAa,IAAI,CAAnB,CAA7B,EAAoD;IAClDC,OAAO,CAACC,KAAR,yEACwEF,aADxE;IAGAA,aAAa,GAAG,CAAhB;EACD;;EAED,IAAMG,eAAe,GAAG,IAAAC,gBAAA,EAAWC,qBAAX,CAAxB;EAEA,OAAOF,eAAe,GACpB,oBAAC,sCAAD,6BACMjC,SADN,EAEMmB,oBAFN;IAGE,aAAa,EAAEjB,aAHjB;IAIE,WAAW,EAAEM,WAJf;IAKE,aAAa,EAAEsB,aALjB;IAME,cAAc,EAAET,cANlB;IAOE,KAAK,EAAEE,KAPT;IAQE,GAAG,EAAEvC;EARP,GADoB,GAYpB,oBAAC,qBAAD,CAAc,QAAd;IAAuB,KAAK,EAAE;EAA9B,GACE,oBAAC,+BAAD,6BACMgB,SADN,EAEMmB,oBAFN;IAGE,QAAQ,EAAEf,SAHZ;IAIE,UAAU,EAAEnB,UAAU,KAAK,KAJ7B;IAKE,kBAAkB,EAAEsB,mBALtB;IAME,gBAAgB,EAAErB,gBAAgB,KAAK,KANzC;IAOE,aAAa,EAAEC,aAAF,WAAEA,aAAF,GAAmB,MAPlC;IAQE,aAAa,EAAEe,aARjB;IASE,aAAa,EAAE4B,aATjB;IAUE,cAAc,EAAET,cAVlB;IAWE,KAAK,EAAEE,KAXT;IAYE,GAAG,EAAEvC;EAZP,GADF,CAZF;AA6BD,CA3KG,CAHJ;AAgLAJ,IAAI,CAACwD,WAAL,GAAmB,MAAnB;;AAOA,SAAS1B,qBAAT,CAA+B2B,QAA/B,EAA2D;EACzD,iBAA6B,IAAApC,cAAA,EAASoC,QAAT,CAA7B;EAAA;EAAA,IAAOC,QAAP;EAAA,IAAiBC,QAAjB;;EACA,IAAI,CAACD,QAAD,IAAaD,QAAjB,EAA2B;IACzBE,QAAQ,CAACF,QAAD,CAAR;EACD;;EACD,OAAOC,QAAP;AACD;;AAEDE,MAAM,CAACC,OAAP,GAAiB7D,IAAjB"}